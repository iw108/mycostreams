---
x-env-variables: &env-variables
  DATA_DIR: /data/input/
  REDIS_DSN: redis://redis:6379
  POSTGRES_DSN: postgresql+asyncpg://postgres:postgres@db:5432/postgres


x-log-labels: &log-labels
  logging: promtail
  logging_jobname: ${DEPLOYMENT_NAME-:morricone}


services:
  watcher:
    image: prince-archiver
    build:
      context: .
    command: ["python", "-m", "prince_archiver.watcher.main"]
    environment: *env-variables
    labels: *log-labels
    depends_on:
      db:
        condition: service_healthy
      redis:
        condition: service_healthy

  upload-worker:
    image: prince-archiver
    command: ["arq", "prince_archiver.upload_worker.WorkerSettings"]
    environment: *env-variables
    labels: *log-labels
    depends_on:
      db:
        condition: service_healthy
      redis:
        condition: service_healthy

  cron-worker:
    image: prince-archiver
    command: ["arq", "prince_archiver.data_archive.WorkerSettings"]
    environment:
      DATA_ARCHIVE_HOST: archive.surfsara.nl
      POSTGRES_DSN: postgresql+asyncpg://postgres:postgres@db:5432/postgres
      REDIS_DSN: redis://redis:6379
    labels: *log-labels
    volumes:
      - ${SSH_HOSTS_PATH:-~/.ssh/known_hosts}:/root/.ssh/known_hosts:ro
    depends_on:
      db:
        condition: service_healthy
      redis:
        condition: service_healthy

  data-archive-subscriber:
    image: prince-archiver
    command: ["python", "-m", "prince_archiver.data_archive.subscriber"]
    environment:
      POSTGRES_DSN: postgresql+asyncpg://postgres:postgres@db:5432/postgres
    labels: *log-labels
    depends_on:
      db:
        condition: service_healthy

  redis:
    image: redis:7.2.4
    ports:
      - 6379:6379
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 10s
      timeout: 5s
      retries: 5

  db:
    image: postgres:15-alpine
    volumes:
      - postgres_data:/var/lib/postgresql/data/
    ports:
      - 5432:5432
    environment:
      - POSTGRES_USER=postgres
      - POSTGRES_PASSWORD=postgres
      - POSTGRES_DB=postgres
    healthcheck:
      test: ["CMD-SHELL", "pg_isready"]
      interval: 10s
      timeout: 5s
      retries: 5


volumes:
  postgres_data:
